#2.1
-ASCII不能满足除美国以外的其他国家
-基于ANCII发展出了其他字符集ANSI，MS-DOS
-DBCS（双字节字符集）前128个是ASCII，之后的字符由两个字节表示，不方便
-Unicode（宽字符）所有字符全部使用两字节表示，Unicode只不过是宽字符的一种实现
#2.2
-一套代码最好可以同时支持ASCII和Unicode
-在c语言中相比于普通数据的处理，宽字符的处理不太一样
    -数据定义不一样char（短）wchar_t（宽）
    -很多用于处理字符串的函数都不再适用
    -字符长度与字节长度不一样
-大部分受宽字符限制的函数都有三种函数版本
    -普通版
    -宽字符版
    -通用版（通过判断是否define特定的标识符来判断改用上面哪个版本）
#2.3
-无论怎样都应该#include <WINDOWS.h>
    -它包含了需要的编程需要数据类型
    -它可以防止同一数据类型被它重复定义
-以字符串为参数的函数都拥有三个版本，程序通过识别#define UNICODE 来决定使用哪个版本的函数
-使用宽字符时需要考虑很多（sizeof（）返回的不再是字符串长度，而是字节长度）
-Unicode编写的程序更容易跨区域

va_start va_end
-搭配va_list（数据类型 char *）va_arg（宏），可以获取可变参数的地址（printf的第三个参数的地址（“...”的地址））
-函数的参数入栈时是从低向高排
